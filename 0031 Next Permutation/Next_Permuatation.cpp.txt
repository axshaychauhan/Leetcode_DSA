class Solution {
public:

        // 1 2 3 --> 1 3 2
        // traverse string from back 
        // find breakpoint where nums[i] < nums[i+1]
        // save that index
        // again traverse from back and find nums[index] < nums[i]
        // swap them
        // reverse part which is next to breakpoint


    void nextPermutation(vector<int>& nums) {
        

        int index = -1;
        int n = nums.size();

//  finding breakpoint where nums[i] < nums[i+1]
        for(int i=n-2; i>=0; --i) {
            if (nums[i] < nums[i+1]) {
                index = i;
                break;
            }
        }

// no breakpoints means its last permutation so reverse it
        if(index == -1){
             reverse(nums.begin(), nums.end());
             return;
        }

// if got breakpoint then swap it with nums[breakpoint] < nums[i]
        for(int i=n-1; i>= 0; --i) {
            if(nums[index] < nums[i]) {
                swap(nums[index],nums[i]);
                break;
            }
        }

// reverse right part of breakpoint
        reverse(nums.begin()+index+1, nums.end());



    }
};